## Campaign ##

input CreateCampaignInput {
    name: String!
    description: String
}

type CreateCampaignPayload implements PayloadInterface {
    status: OperationStatus!
    campaignUUID: ID
    campaign: Campaign
    errors: [GenericProblems!]
    query: Query
}

input ChangeNameCampaignInput {
    uuid: ID!
    name: String!
}

type ChangeNameCampaignPayload implements PayloadInterface {
    status: OperationStatus!
    campaignUUID: ID
    campaign: Campaign
    errors: [GenericProblems!]
    query: Query
}

input UpdateDescriptionCampaignInput {
    uuid: ID!
    description: String!
}

type UpdateDescriptionCampaignPayload implements PayloadInterface {
    status: OperationStatus!
    campaignUUID: ID
    campaign: Campaign
    errors: [GenericProblems!]
    query: Query
}

input UpdateNotesCampaignInput {
    uuid: ID!
    notes: String!
}

type UpdateNotesCampaignPayload implements PayloadInterface {
    status: OperationStatus!
    campaignUUID: ID
    campaign: Campaign
    errors: [GenericProblems!]
    query: Query
}

input DeleteCampaignInput {
    uuid: [ID!]!
}

type DeleteCampaignPayload implements PayloadInterface {
    status: OperationStatus!
    campaignUUID: [ID!]
    errors: [GenericProblems!]
    query: Query
}

## Player Character ##

input AddPCInput {
    name: String!
    description: String
    player: String
    uri: HTTPUrl
    campaignUUID: ID!
}

type AddPCPayload implements PayloadInterface {
    status: OperationStatus!
    playerUUID: ID
    playerCharacter: PlayerCharacter
    errors: [GenericProblems!]
    query: Query
}

input ChangeNamePCInput {
    uuid: ID!
    name: String!
}

type ChangeNamePCPayload implements PayloadInterface {
    status: OperationStatus!
    playerUUID: ID
    playerCharacter: PlayerCharacter
    errors: [GenericProblems!]
    query: Query
}

input UpdateDescriptionPCInput {
    uuid: ID!
    description: String!
}

type UpdateDescriptionPCPayload implements PayloadInterface {
    status: OperationStatus!
    playerUUID: ID
    playerCharacter: PlayerCharacter
    errors: [GenericProblems!]
    query: Query
}

input UpdateNotesPCInput {
    uuid: ID!
    notes: String!
}

type UpdateNotesPCPayload implements PayloadInterface {
    status: OperationStatus!
    playerUUID: ID
    playerCharacter: PlayerCharacter
    errors: [GenericProblems!]
    query: Query
}

input AssignPlayerPCInput {
    uuid: ID!
    player: String!
}

type AssignPlayerPCPayload implements PayloadInterface {
    status: OperationStatus!
    playerUUID: ID
    playerCharacter: PlayerCharacter
    errors: [GenericProblems!]
    query: Query
}

input LinkCharacterSheetInput {
    uuid: ID!
    uri: HTTPUrl!
}

type LinkCharacterSheetPayload implements PayloadInterface {
    status: OperationStatus!
    playerUUID: ID
    playerCharacter: PlayerCharacter
    errors: [GenericProblems!]
    query: Query
}

input DeletePCInput {
    uuid: [ID!]!
}

type DeletePCPayload implements PayloadInterface {
    status: OperationStatus!
    playerUUID: [ID!]
    errors: [GenericProblems!]
    query: Query
}

## Party ##

input CreatePartyInput {
    name: String!
    description: String
    campaignUUID: ID!
    playerCharacters: [ID!]!
}

type CreatePartyPayload implements PayloadInterface {
    status: OperationStatus!
    partyUUID: ID
    party: Party
    errors: [GenericProblems!]
    query: Query
}

input ChangeNamePartyInput {
    uuid: ID!
    name: String!
}

type ChangeNamePartyPayload implements PayloadInterface {
    status: OperationStatus!
    partyUUID: ID
    party: Party
    errors: [GenericProblems!]
    query: Query
}

input UpdateDescriptionPartyInput {
    uuid: ID!
    description: String!
}

type UpdateDescriptionPartyPayload implements PayloadInterface {
    status: OperationStatus!
    partyUUID: ID
    party: Party
    errors: [GenericProblems!]
    query: Query
}

input UpdateNotesPartyInput {
    uuid: ID!
    notes: String!
}

type UpdateNotesPartyPayload implements PayloadInterface {
    status: OperationStatus!
    partyUUID: ID
    party: Party
    errors: [GenericProblems!]
    query: Query
}

input AddPCPartyInput {
    partyUUID: ID!
    playerUUID: [ID!]!
}

type AddPCPartyPayload implements PayloadInterface {
    status: OperationStatus!
    partyUUID: ID
    party: Party
    playerUUID: [ID!]
    playerCharacter: [PlayerCharacter!]
    errors: [GenericProblems!]
    query: Query
}

input RemovePCPartyInput {
    partyUUID: ID!
    playerUUID: [ID!]!
}

type RemovePCPartyPayload implements PayloadInterface {
    status: OperationStatus!
    partyUUID: ID
    party: Party
    playerUUID: [ID!]
    playerCharacter: [PlayerCharacter!]
    errors: [GenericProblems!]
    query: Query
}

input DisbandPartyInput {
    uuid: [ID!]!
}

type DisbandPartyPayload implements PayloadInterface {
    status: OperationStatus!
    partyUUID: [ID!]
    errors: [GenericProblems!]
    query: Query
}
